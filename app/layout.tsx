import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import MainHeader from "./components/MainHeader";
import { getNextAuthSession } from "@/lib/nextauthSession/session";
import { redirect } from "next/navigation";
import { prisma } from "@/lib/db/prismaDB";
import { ThemeProvider } from "next-themes";
import AuthInitializer from "@/components/AuthInitializer";
import { Providers } from "./providers";
import ClientLayout from "./ClientLayout";
import { Toaster } from "@/components/ui/sonner";

const geistSans = Geist({
    variable: "--font-geist-sans",
    subsets: ["latin"],
});

const geistMono = Geist_Mono({
    variable: "--font-geist-mono",
    subsets: ["latin"],
});

export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};

export default async function RootLayout({
    children,
}: Readonly<{
    children: React.ReactNode;
}>) {
    const session = await getNextAuthSession();
    if (!session?.user?.id) {
        redirect("/api/auth/signin");
    }
    const userId = session.user.id as string;

    try {
        const user = await prisma.user.findUnique({
            where: { id: userId },
            select: { id: true, name: true, image: true },
        });
        if (!user) redirect("/api/auth/signin");

        return (
            <html lang="en" className="h-full" suppressHydrationWarning>
                <body
                    className={`${geistSans.variable} ${geistMono.variable} antialiased h-full bg-light-background dark:bg-dark-background`}
                >
                    <Providers>
                        <ThemeProvider attribute={"class"} enableSystem defaultTheme="system">
                            <AuthInitializer />
                            <ClientLayout userId={userId} name={user.name} image={user.image}>
                                {children}
                            </ClientLayout>
                            <Toaster />
                        </ThemeProvider>
                    </Providers>
                </body>
            </html>
        );
    } catch (error) {
        console.error("Failed to fetch user:", error);
        redirect("/api/auth/signin");
    }
}
